
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."trees" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "description" "text" NOT NULL,
    "name" "text" NOT NULL
);

ALTER TABLE "public"."trees" OWNER TO "postgres";

COMMENT ON TABLE "public"."trees" IS 'Family trees';

COMMENT ON COLUMN "public"."trees"."description" IS 'Short description';

COMMENT ON COLUMN "public"."trees"."name" IS 'Some type of name for the family';

ALTER TABLE "public"."trees" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."family_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."family_member_relationships" (
    "id" bigint NOT NULL,
    "family_id" bigint NOT NULL,
    "from" bigint NOT NULL,
    "to" bigint NOT NULL,
    "relationship_type" bigint NOT NULL
);

ALTER TABLE "public"."family_member_relationships" OWNER TO "postgres";

COMMENT ON TABLE "public"."family_member_relationships" IS 'Relationships of members within a family';

ALTER TABLE "public"."family_member_relationships" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."family_member_relationships_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."family_members" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "first_name" character varying NOT NULL,
    "second_name" character varying NOT NULL,
    "birth_date" "date" NOT NULL,
    "gender" character varying,
    "biography" "text",
    "profession" character varying,
    "death_date" "date",
    "family_id" bigint NOT NULL,
    "uuid" "uuid" DEFAULT "gen_random_uuid"() NOT NULL
);

ALTER TABLE "public"."family_members" OWNER TO "postgres";

COMMENT ON TABLE "public"."family_members" IS 'Table of family members';

COMMENT ON COLUMN "public"."family_members"."uuid" IS 'uuid';

ALTER TABLE "public"."family_members" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."family_members_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."relationship_types" (
    "id" bigint NOT NULL,
    "type" character varying NOT NULL,
    "subtype" "text" NOT NULL
);

ALTER TABLE "public"."relationship_types" OWNER TO "postgres";

COMMENT ON TABLE "public"."relationship_types" IS 'types of relationships';

COMMENT ON COLUMN "public"."relationship_types"."subtype" IS 'Subtype';

ALTER TABLE "public"."relationship_types" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."relationship_types_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."family_member_relationships"
    ADD CONSTRAINT "family_member_relationships_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."family_members"
    ADD CONSTRAINT "family_members_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."trees"
    ADD CONSTRAINT "family_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."relationship_types"
    ADD CONSTRAINT "relationship_types_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."family_member_relationships"
    ADD CONSTRAINT "family_member_relationships_family_id_fkey" FOREIGN KEY ("family_id") REFERENCES "public"."trees"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."family_member_relationships"
    ADD CONSTRAINT "family_member_relationships_from_fkey" FOREIGN KEY ("from") REFERENCES "public"."family_members"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."family_member_relationships"
    ADD CONSTRAINT "family_member_relationships_relationship_type_fkey" FOREIGN KEY ("relationship_type") REFERENCES "public"."relationship_types"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."family_member_relationships"
    ADD CONSTRAINT "family_member_relationships_to_fkey" FOREIGN KEY ("to") REFERENCES "public"."family_members"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."family_members"
    ADD CONSTRAINT "family_members_family_id_fkey" FOREIGN KEY ("family_id") REFERENCES "public"."trees"("id");

CREATE POLICY "Enable delete for users based on user_id" ON "public"."family_members" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = '594c455f-a101-4487-bfb4-fe5188f5badd'::"uuid"));

CREATE POLICY "Enable insert for authenticated users only" ON "public"."family_member_relationships" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."family_members" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."trees" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable read access for all users" ON "public"."family_member_relationships" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."family_members" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."relationship_types" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."trees" FOR SELECT USING (true);

CREATE POLICY "Enable update for authenticated users only" ON "public"."family_members" FOR UPDATE TO "authenticated" USING (true);

ALTER TABLE "public"."family_member_relationships" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."family_members" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."relationship_types" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."trees" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "public"."trees" TO "anon";
GRANT ALL ON TABLE "public"."trees" TO "authenticated";
GRANT ALL ON TABLE "public"."trees" TO "service_role";

GRANT ALL ON SEQUENCE "public"."family_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."family_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."family_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."family_member_relationships" TO "anon";
GRANT ALL ON TABLE "public"."family_member_relationships" TO "authenticated";
GRANT ALL ON TABLE "public"."family_member_relationships" TO "service_role";

GRANT ALL ON SEQUENCE "public"."family_member_relationships_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."family_member_relationships_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."family_member_relationships_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."family_members" TO "anon";
GRANT ALL ON TABLE "public"."family_members" TO "authenticated";
GRANT ALL ON TABLE "public"."family_members" TO "service_role";

GRANT ALL ON SEQUENCE "public"."family_members_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."family_members_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."family_members_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."relationship_types" TO "anon";
GRANT ALL ON TABLE "public"."relationship_types" TO "authenticated";
GRANT ALL ON TABLE "public"."relationship_types" TO "service_role";

GRANT ALL ON SEQUENCE "public"."relationship_types_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."relationship_types_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."relationship_types_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
